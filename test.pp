Program test101;

{$H+}{$LongStrings ON}  


Uses SysUtils,DateUtils, FGInt;

Var
    f1,f2,f3,f4,f5,f6,f7,f8,f9: TFGInt;
    t1,t2 : TDateTime;
    S, strIn, strOut, resultStr : String;
    i, j, treshold, time : longword;
	
	
Begin
writeln;

writeln('- String conversion tests:');

strIn := '1234567890987654321';
Base10StringToFGInt(strIn, f1);
FGIntToBase10String(f1, strOut);
If strIn = strOut then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Base10 conversion test: ' + resultStr);
FGIntDestroy(f1);

strIn := '11110000111100001010';
Base2StringToFGInt(strIn, f1);
FGIntToBase2String(f1, strOut);
If strIn = strOut then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Base2 conversion test: ' + resultStr);
FGIntDestroy(f1);

strIn := '!R@C%YN)N^Q%Y{#$"NCRPDF$V%(qb[3Q5GW#|QCR$){W';
Base256StringToFGInt(strIn, f1);
FGIntToBase256String(f1, strOut);
If strIn = strOut then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Base256 (byte string) conversion test: ' + resultStr);
FGIntDestroy(f1);


writeln('- Arithmetic tests:');

strIn := '12345678909876543210';
Base10StringToFGInt(strIn, f1);
strIn := '100000000000000000001';
Base10StringToFGInt(strIn, f2);
FGIntAdd(f1, f2, f3);
FGIntSub(f3, f1, f4);
If FGIntCompareAbs(f2, f4) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Addition/subtraction test: ' + resultStr);
FGIntDestroy(f1);
FGIntDestroy(f2);
FGIntDestroy(f3);
FGIntDestroy(f4);

strIn := '1234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909';
Base10StringToFGInt(strIn, f1);
strIn := '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000';
Base10StringToFGInt(strIn, f2);
FGIntPencilPaperMultiply(f1, f2, f3);
FGIntKaratsubaMultiply(f1, f2, f4);
If FGIntCompareAbs(f3, f4) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Multiplication test: ' + resultStr);
FGIntDestroy(f1);
FGIntDestroy(f2);
FGIntDestroy(f3);
FGIntDestroy(f4);

strIn := '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111';
Base2StringToFGInt(strIn, f1);
FGIntPencilPaperSquare(f1, f2);
// FGIntKaratsubaSquare(f1, f3);
FGIntMul(f1, f1, f3);
If FGIntCompareAbs(f2, f3) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Squaring test: ' + resultStr);
FGIntDestroy(f1);
FGIntDestroy(f2);
FGIntDestroy(f3);

// strIn := '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111';
// Base2StringToFGInt(strIn, f1);
// FGIntPencilPaperSquare(f1, f2);
// FGIntToBase10String(f2, resultStr);
// Writeln(' Squaring: ' + resultStr);
// FGIntMul(f1, f1, f3);
// FGIntToBase10String(f3, resultStr);
// Writeln(' multipli: ' + resultStr);
// If FGIntCompareAbs(f2, f3) = Eq then resultStr := 'success' else resultStr := '! failed !';
// Writeln(' Squaring test: ' + resultStr);
// FGIntDestroy(f1);
// FGIntDestroy(f2);
// FGIntDestroy(f3);

strIn := '1234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909';
Base10StringToFGInt(strIn, f1);
strIn := '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000003';
Base10StringToFGInt(strIn, f2);
FGIntMul(f1, f2, f3);
FGIntDivMod(f3, f2, f4, f5);
If FGIntCompareAbs(f4, f1) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Division test: ' + resultStr);
FGIntDestroy(f1);
FGIntDestroy(f2);
FGIntDestroy(f3);
FGIntDestroy(f4);
FGIntDestroy(f5);

strIn := '123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789098765432101';
Base10StringToFGInt(strIn, f1);
strIn := '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000003';
Base10StringToFGInt(strIn, f2);
FGIntDivMod(f1, f2, f3, f4);
FGIntBarretDivMod(f1, f2, f5, f6);
If FGIntCompareAbs(f3, f5) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Barret Division test: ' + resultStr);
If FGIntCompareAbs(f4, f6) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Barret Remainder test: ' + resultStr);
  // FGIntToBase10String(f5, resultStr);
  // Writeln(' barret mod quotient test:   ' + resultStr);
  // FGIntToBase10String(f3, resultStr);
  // Writeln(' Division mod quotient test: ' + resultStr);
  // FGIntToBase10String(f6, resultStr);
  // Writeln(' barret mod remainder test:   ' + resultStr);
  // FGIntToBase10String(f4, resultStr);
  // Writeln(' Division mod remainder test: ' + resultStr);
FGIntDestroy(f1);
FGIntDestroy(f2);
FGIntDestroy(f3);
FGIntDestroy(f4);
FGIntDestroy(f5);
FGIntDestroy(f6);


strIn := '123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789';
Base10StringToFGInt(strIn, f1);
strIn := '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000003';
Base10StringToFGInt(strIn, f2);
strIn := '10000000000000555555555555555555555555000000000000000000000000000011000000000000008888888888888888880000000000000000000003';
Base10StringToFGInt(strIn, f3);
FGIntModExp(f1, f3, f2, f4);
FGIntBarretModExp(f1, f3, f2, f5);
If FGIntCompareAbs(f4, f5) = Eq then resultStr := 'success' else resultStr := '! failed !';
Writeln(' Modular Exponentiation test: ' + resultStr);
FGIntDestroy(f1);
FGIntDestroy(f2);
FGIntDestroy(f3);
FGIntDestroy(f4);
FGIntDestroy(f5);


// exit;


// strIn := '123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789123456789098765432101234567890987654321012345678909876543210123456789098765432101234567890987654321012345678909876543210123456789123456789098765432101234567890987654321';
// Base10StringToFGInt(strIn, f1);
// strIn := ' 135066410865995223349603216278805969938881475605667027524485143851526510604859533833940287150571909441798207282164471551373680419703964191743046496589274256239341020864383202110372958725762358509643110564073501508187510676594629205563685529475213500852879416377328533906109750544334999811150056977236890927563';
// Base10StringToFGInt(strIn, f2);
// strIn := '1000000000000055555555555555555555555500000000000000000000000000001100000000000000888888888888888888000000000000000000000310000000000000555555555555555555555555000000000000000000000000000011000000000000008888888888888888880000000000000000000003100000000000005555555555555555555555550000000000000000000000000';
// Base10StringToFGInt(strIn, f3);

//     t1 := Now;
//     for i := 1 to 50 Do
//         Begin
//           FGIntBarretModExp(f1, f3, f2, f5);
//         end;
//     t2 := Now;
//     // FGIntToBase10String(f3,S);
//     Writeln(' barret took '+inttostr(MilliSecondsBetween(t1,t2))+' milliseconds');
    
//     t1 := Now;
//     for i := 1 to 50 Do
//         Begin
//           FGIntModExp(f1, f3, f2, f4);
//         end;
//     t2 := Now;
//     // FGIntToBase10String(f3,S);
//     Writeln(' montgomery took '+inttostr(MilliSecondsBetween(t1,t2))+' milliseconds');
    
    
//    readln;

End.
